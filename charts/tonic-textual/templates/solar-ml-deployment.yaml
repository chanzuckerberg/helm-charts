apiVersion: apps/v1
kind: Deployment
metadata:
  name: textual-ml
  namespace: {{ .Release.Namespace }}
  labels:
    app: textual-ml
spec:
  replicas: {{ (.Values.textual_ml).numberOfMlWorkers | default 1 }}
  selector:
    matchLabels:
      app: textual-ml
  strategy:
    type: {{ .Values.deployStrategy | quote | default "Recreate" }}
  revisionHistoryLimit: 1
  template:
    metadata:
      labels:
        app: textual-ml
    spec:
      initContainers:
        - name: wait-for-web-before-startup
          image: busybox
          command: [ "sh", "-c", "until nc -z textual-api-server 443 > /dev/null; do echo Waiting for web server.; sleep 2; done;" ]
      containers:
      - securityContext:
          readOnlyRootFilesystem: true
        volumeMounts:
          - name: var-logs-public
            mountPath: /usr/bin/textual/logs_public
          - name: var-logs
            mountPath: /usr/bin/textual/logs
          {{- if or .Values.enableLogCollection (not (hasKey .Values "enableLogCollection")) }}
          - name: vector-configuration
            mountPath: /usr/bin/textual/vector_config
          {{- end }}
          - name: supervisor-run
            mountPath: /var/log/supervisor
          - name: supervisor-log
            mountPath: /var/run/supervisor
          - name: custom-models
            mountPath: /usr/bin/textual/custom_models
          - name: tmp
            mountPath: /tmp
        env:
          - name: SOLAR_DB_DATABASE
            value: {{ .Values.textualDatabase.dbName }}
          - name: SOLAR_DB_USERNAME
            value: {{ .Values.textualDatabase.user }}
          - name: SOLAR_DB_PASSWORD
            valueFrom:
              secretKeyRef:
                name: textual-db-password
                key: password
          - name: SOLAR_DB_PORT
            value: {{quote .Values.textualDatabase.port }}
          - name: SOLAR_DB_SSLMODE
            value: {{ .Values.textualDatabase.sslMode }}
          - name: SOLAR_DB_HOST
            value: {{ .Values.textualDatabase.host }}
        {{- if or .Values.enableLogCollection (not (hasKey .Values "enableLogCollection")) }}
          - name: ENABLE_LOG_COLLECTION
            value: {{ .Values.enableLogCollection }}
        {{- end }}
        {{- if (.Values.textual_ml).textualMlParallelism | quote }}
          - name: TEXTUAL_ML_WORKERS
            value: {{quote .Values.textual_ml.textualMlParallelism }}
        {{- end }}
        {{- if (.Values.textual_ml).env }}
        {{- range $key, $value := .Values.textual_ml.env }}
          - name: {{ $key }}
            value: {{ $value | quote }}
        {{- end }}
        {{- end }}
          - name: ENVIRONMENT_NAME
            value: {{ .Values.environmentName }}
        {{- if (.Values.textual_ml).useGpu }}
        image: quay.io/tonicai/textual-ml-gpu:{{ .Values.textualVersion }}
        {{- else }}
        {{- if  (.Values.textual_ml).image }}
        image: {{ .Values.textual_ml.image }}:{{ .Values.textualVersion }}
        {{ else }}
        image: quay.io/tonicai/textual-ml:{{ .Values.textualVersion }}
        {{- end }}
        {{- end }}
        imagePullPolicy: IfNotPresent
        name: textual-ml
        ports:
          - containerPort: 7701
        resources:
          limits:
            memory: "8Gi"
            {{- if (.Values.textual_ml).useGpu }}
            nvidia.com/gpu: "1"
            {{- end }}
          requests:
            memory: "1Gi"
            ephemeral-storage: "1Gi"
        startupProbe:
          httpGet:
            path: /health
            port: 7701
            scheme: HTTPS
          initialDelaySeconds: 5
          periodSeconds: 60
          timeoutSeconds: 30
          failureThreshold: 5
      {{- if or .Values.enableLogCollection (not (hasKey .Values "enableLogCollection")) }}
      - name: vector
        image: timberio/vector:latest-distroless-static
        env:
          - name: VECTOR_SELF_NODE_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: spec.nodeName
          - name: VECTOR_SELF_POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: VECTOR_SELF_POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: LOG_COLLECTION_FOLDER
            value: "/usr/bin/textual/logs_public"
        volumeMounts:
          - name: var-logs-public
            mountPath: "/usr/bin/textual/logs_public"
          - name: vector-configuration
            mountPath: "/usr/bin/textual/vector_config"
          - name: vector-working
            mountPath: "/etc/textual/vector_data"
        args:
          - "-w"
          - "--config"
          - "/usr/bin/textual/vector_config/vector.toml"
      {{- end }}
      restartPolicy: Always
      imagePullSecrets:
        - name: textual-image-pull-secret
      serviceAccountName: {{ template "textual.serviceAccountName" . }}
      volumes:
        - name: var-logs-public
          emptyDir: {}
        - name: var-logs
          emptyDir: {}
        {{- if or .Values.enableLogCollection (not (hasKey .Values "enableLogCollection")) }}
        - name: vector-configuration
          emptyDir: {}
        - name: vector-working
          emptyDir: {}
        {{- end }}
        - name: supervisor-run
          emptyDir: {}
        - name: supervisor-log
          emptyDir: {}
        - name: custom-models
          emptyDir: {}
        - name: tmp
          emptyDir: {}
      nodeSelector:
        kubernetes.io/arch: amd64
        tonic/gpu: "true"