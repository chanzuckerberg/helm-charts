{{- $ports := (.Values.textual_api_server).ports | default dict }}
{{- $httpsOnly := $ports.httpsOnly | default true }}
{{- $httpPort := $ports.http | default 6880 }}
{{- $httpsPort := $ports.https | default 6443 }}
{{- $tolerations :=
  .Values.textual_api_server.tolerations
}}
{{- $nodeSelector :=
  .Values.textual_api_server.nodeSelector
}}
{{- $resources := coalesce
  .Values.textual_api_server.resources
  (dict "limits" (dict "memory" "3Gi") "requests" (dict "memory" "512Mi" "ephemeral-storage" "512Mi")) -}}
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: textual-api-server
  name: textual-api-server
  namespace: {{ .Release.Namespace }}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: textual-api-server
  strategy:
    type: {{ .Values.deployStrategy | quote | default "Recreate" }}
  revisionHistoryLimit: 1
  template:
    metadata:
      labels:
        app: textual-api-server
    spec:
      nodeSelector:
        {{- toYaml $.Values.textual_api_server.nodeSelector | nindent 8}}
      tolerations:
        {{- include "textual.tolerations" (list $ $tolerations) | nindent 8 }}
      containers:
        - securityContext:
            readOnlyRootFilesystem: true
          volumeMounts:
          - name: var-logs-public
            mountPath: /usr/bin/textual/logs_public
          - name: var-logs
            mountPath: /usr/bin/textual/logs
          {{- if or .Values.enableLogCollection (not (hasKey .Values "enableLogCollection")) }}
          - name: vector-configuration
            mountPath: /usr/bin/textual/vector_config
          {{- end }}
          - name: tmp
            mountPath: /tmp
          - name: dotnet
            mountPath: /.dotnet
          env:
          {{- if (.Values.textual_api_server).env}}
          {{- range $key, $value := .Values.textual_api_server.env }}
          - name: {{ $key }}
            value: {{ $value | quote }}
          {{- end }}
          {{- end }}
          - name: SOLAR_SECRET
            valueFrom:
              secretKeyRef:
                name: textual-encryption-secret
                key: secret
          - name: SOLAR_DB_DATABASE
            value: {{ .Values.textualDatabase.dbName }}
          - name: SOLAR_DB_USERNAME
            value: {{ .Values.textualDatabase.user }}
          - name: SOLAR_DB_PASSWORD
            valueFrom:
              secretKeyRef:
                name: textual-db-password
                key: password
          - name: SOLAR_DB_PORT
            value: {{quote .Values.textualDatabase.port }}
          - name: SOLAR_DB_SSLMODE
            value: {{ .Values.textualDatabase.sslMode }}
          - name: SOLAR_DB_HOST
            value: {{ .Values.textualDatabase.host }}
          - name: ENVIRONMENT_NAME
            value: {{ .Values.environmentName }}
          {{- if .Values.solarStatisticsSeed }}
          - name: SOLAR_STATISTICS_SEED
            value: {{quote .Values.solarStatisticsSeed }}
          {{- end }}
          {{- if .Values.openAiApiKey }}
          - name: OPENAI_API_KEY
            valueFrom:
              secretKeyRef:
                name: openai-api-key
                key: secret
          {{- end }}
          {{- if .Values.googleClientId }}
          - name: SOLAR_SSO_GOOGLE_CLIENT_ID
            value: {{ .Values.googleClientId }}
          {{- end }}
          {{- if .Values.googleClientSecret }}
          - name: SOLAR_SSO_GOOGLE_CLIENT_SECRET
            valueFrom:
              secretKeyRef:
                name: google-sso-client-secret
                key: secret
          {{- end }}
          {{- if .Values.githubClientId }}
          - name: SOLAR_SSO_GITHUB_CLIENT_ID
            value: {{ .Values.githubClientId }}
          {{- end }}
          {{- if .Values.githubClientSecret }}
          - name: SOLAR_SSO_GITHUB_CLIENT_SECRET
            valueFrom:
              secretKeyRef:
                name: github-sso-client-secret
                key: secret
          {{- end }}
          {{- if .Values.oktaClientId }}
          - name: SOLAR_SSO_OKTA_CLIENT_ID
            value: {{ .Values.oktaClientId }}
          {{- end }}
          {{- if .Values.oktaDomain }}
          - name: SOLAR_SSO_OKTA_DOMAIN
            value: {{ .Values.oktaDomain }}
          {{- end }}
          {{- if .Values.oktaAuthServerId }}
          - name: SOLAR_SSO_OKTA_AUTHORIZATION_SERVER_ID
            value: {{ .Values.oktaAuthServerId }}
          {{- end }}
          {{- if .Values.oktaIdentityProviderId }}
          - name: SOLAR_SSO_OKTA_IDENTITY_PROVIDER_ID
            value: {{ .Values.oktaIdentityProviderId }}
          {{- end }}
          {{- if .Values.azureClientId }}
          - name: SOLAR_SSO_AZURE_CLIENT_ID
            value: {{ .Values.azureClientId }}
          {{- end }}
          {{- if .Values.azureTenantId }}
          - name: SOLAR_SSO_AZURE_TENANT_ID
            value: {{ .Values.azureClientId }}
          {{- end }}
          {{- if .Values.azureClientSecret }}
          - name: SOLAR_SSO_AZURE_CLIENT_SECRET
            valueFrom:
              secretKeyRef:
                name: azure-sso-client-secret
                key: secret
          {{- end }}
          {{- if or .Values.enableLogCollection (not (hasKey .Values "enableLogCollection")) }}
          - name: ENABLE_LOG_COLLECTION
            value: {{ .Values.enableLogCollection }}
          {{- end }}
          - name: SOLAR_PY_URL
            value: https://textual-ml:7701
          {{- if not $httpsOnly }}
          - name: SOLAR_PORT_HTTP
            value: {{ $httpPort | quote }}
          {{- end }}
          - name: SOLAR_PORT_HTTPS
            value: {{ $httpsPort | quote }}
          - name: SOLAR_HTTPS_ONLY
            value: {{ $httpsOnly | quote }}
          {{- if  (.Values.textual_api_server).image }}
          image: {{ .Values.textual_api_server.image }}:{{ .Values.textualVersion }}
          {{ else }}
          image: quay.io/tonicai/textual-api:{{ .Values.textualVersion }}
          {{- end }}
          imagePullPolicy: IfNotPresent
          name: textual-api-server
          ports:
          {{- if not $httpsOnly }}
          - containerPort: {{ $httpPort }}
            name: "http"
          {{- end }}
          - containerPort: {{ $httpsPort }}
            name: "https"
          resources:
            {{- toYaml $resources | nindent 12 }}
          startupProbe:
            httpGet:
              scheme: HTTPS
              path: /health
              port: {{ $httpsPort }}
            initialDelaySeconds: 5
            periodSeconds: 60
            timeoutSeconds: 30
            failureThreshold: 5
        {{- if or .Values.enableLogCollection (not (hasKey .Values "enableLogCollection")) }}
        {{- include "textual.loggingSidecar" (list $ "var-logs-public") | nindent 8 }}
        {{- end }}
      restartPolicy: Always
      serviceAccountName: {{ template "textual.serviceAccountName" . }}
      imagePullSecrets:
        - name: textual-image-pull-secret
      volumes:
      - name: var-logs-public
        emptyDir: {}
      - name: var-logs
        emptyDir: {}
      {{- if or .Values.enableLogCollection (not (hasKey .Values "enableLogCollection")) }}
      - name: vector-configuration
        emptyDir: {}
      - name: vector-working
        emptyDir: {}
      {{- end }}
      - name: tmp
        emptyDir: {}
      - name: dotnet
        emptyDir: {}
status: {}